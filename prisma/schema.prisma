// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  role          UserRole  @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  properties Property[]
  favorites Favorite[]
  searches SearchHistory[]
  agentProfile AgentProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String        @id @default(cuid())
  mlsNumber   String        @unique
  title       String
  description String?       @db.Text
  price       Float
  propertyType PropertyType
  status      PropertyStatus @default(ACTIVE)
  
  // Address
  streetNumber String?
  streetName   String?
  city         String
  state        String
  zipCode      String?
  country      String       @default("US")
  
  // Property Details
  bedrooms     Int
  bathrooms    Float
  squareFeet   Int?
  lotSize      Float?
  yearBuilt    Int?
  
  // Coordinates
  latitude     Float?
  longitude    Float?
  
  // Images
  images       String[]     @default([])
  
  // Features
  features     String[]     @default([])
  
  // Agent/User
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  favorites    Favorite[]
  views        PropertyView[]
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
}

model PropertyView {
  id         String   @id @default(cuid())
  propertyId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  viewedAt   DateTime @default(now())
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model SearchHistory {
  id          String   @id @default(cuid())
  userId      String
  query       String?
  location    String?
  minPrice    Float?
  maxPrice    Float?
  bedrooms    Int?
  bathrooms   Int?
  propertyType PropertyType?
  searchedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?  @db.Text
  phone       String?
  license     String?
  specialties String[] @default([])
  languages   String[] @default([])
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String   @db.Text
  propertyId String?
  type      ContactType @default(GENERAL)
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  VILLA
  OFFICE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
  INACTIVE
}

enum ContactType {
  GENERAL
  PROPERTY_INQUIRY
  AGENT_REQUEST
  SUPPORT
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESOLVED
  CLOSED
}